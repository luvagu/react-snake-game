{"version":3,"sources":["utils/snake.js","utils/food.js","utils/grid.js","components/Snake.jsx","components/Food.jsx","utils/game.js","App.jsx","index.jsx"],"names":["updateSnake","inputDirection","snakeBody","foodBlock","onSnake","amount","i","push","length","addSegments","x","y","ignoreHead","some","segment","idx","equalCoords","pos1","pos2","getRandomFoodCoords","newFoodCoords","Math","floor","random","Snake","coords","className","style","gridRowStart","gridColumnStart","Food","checkDeath","position","getSnakeHead","snakeIntersection","App","useState","setSnakeBody","setFoodBlock","useRef","requestRef","previousTimeRef","animate","useCallback","currentTS","window","confirm","location","current","requestAnimationFrame","userInputDirection","e","key","useEffect","cancelAnimationFrame","addEventListener","removeEventListener","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55423d6f.chunk.js","sourcesContent":["export const SNAKE_SPEED = 5\r\n\r\nexport const EXPANSION_RATE = 1\r\n\r\nexport function updateSnake(inputDirection, snakeBody, foodBlock) {\r\n\tif (onSnake(snakeBody, foodBlock)) {\r\n\t\tsnakeBody = addSegments(EXPANSION_RATE, snakeBody)\r\n\t}\r\n\r\n\tfor (let i = snakeBody.length - 2; i >= 0; i--) {\r\n\t\tsnakeBody[i + 1] = { ...snakeBody[i] }\r\n\t}\r\n\r\n\tsnakeBody[0].x += inputDirection.x\r\n\tsnakeBody[0].y += inputDirection.y\r\n\r\n\treturn snakeBody\r\n}\r\n\r\nexport function onSnake(snakeBody, foodBlock, { ignoreHead = false } = {}) {\r\n\treturn snakeBody.some((segment, idx) => {\r\n\t\tif (ignoreHead && idx === 0) return false\r\n\t\treturn equalCoords(segment, foodBlock)\r\n\t})\r\n}\r\n\r\nexport function snakeIntersection(snakeBody) {\r\n\treturn onSnake(snakeBody, snakeBody[0], { ignoreHead: true })\r\n}\r\n\r\nexport function getSnakeHead(snakeBody) {\r\n  return snakeBody[0]\r\n}\r\n\r\nfunction equalCoords(pos1, pos2) {\r\n\treturn pos1.x === pos2.x && pos1.y === pos2.y\r\n}\r\n\r\nfunction addSegments(amount, snakeBody) {\r\n\tfor (let i = 0; i < amount; i++) {\r\n\t\tsnakeBody.push({ ...snakeBody[snakeBody.length - 1] })\r\n\t}\r\n\r\n\treturn snakeBody\r\n}\r\n","import { onSnake } from './snake'\r\nimport { randomGridPosition } from './grid'\r\n\r\nexport function getRandomFoodCoords(snakeBody) {\r\n\tlet newFoodCoords\r\n\r\n\twhile (newFoodCoords == null || onSnake(snakeBody, newFoodCoords)) {\r\n\t\tnewFoodCoords = randomGridPosition()\r\n\t}\r\n\r\n\treturn newFoodCoords\r\n}\r\n","const GRID_SIZE = 21\r\n\r\nexport function randomGridPosition() {\r\n\treturn {\r\n\t\tx: Math.floor(Math.random() * GRID_SIZE) + 1,\r\n\t\ty: Math.floor(Math.random() * GRID_SIZE) + 1,\r\n\t}\r\n}\r\n\r\nexport function outsideGrid(position) {\r\n\treturn (\r\n\t\tposition.x < 1 ||\r\n\t\tposition.x > GRID_SIZE ||\r\n\t\tposition.y < 1 ||\r\n\t\tposition.y > GRID_SIZE\r\n\t)\r\n}\r\n","function Snake({ coords }) {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName='snake'\r\n\t\t\tstyle={{ gridRowStart: coords.y, gridColumnStart: coords.x }}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Snake\r\n","function Food({ coords }) {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName='food'\r\n\t\t\tstyle={{ gridRowStart: coords.y, gridColumnStart: coords.x }}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Food\r\n","import { outsideGrid } from './grid'\r\nimport { getSnakeHead, snakeIntersection } from './snake'\r\n\r\nexport function checkDeath(snakeBody) {\r\n\treturn (\r\n\t\toutsideGrid(getSnakeHead(snakeBody)) ||\r\n\t\tsnakeIntersection(snakeBody)\r\n\t)\r\n}\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { SNAKE_SPEED, updateSnake, onSnake } from './utils/snake'\r\nimport { getRandomFoodCoords } from './utils/food'\r\n\r\nimport Snake from './components/Snake'\r\nimport Food from './components/Food'\r\nimport { checkDeath } from './utils/game'\r\n\r\nfunction App() {\r\n\tconst [snakeBody, setSnakeBody] = useState([{ x: 11, y: 11 }])\r\n\tconst [foodBlock, setFoodBlock] = useState(getRandomFoodCoords(snakeBody))\r\n\r\n\tconst inputDirection = useRef({ x: 0, y: 0 })\r\n\tconst requestRef = useRef()\r\n\tconst previousTimeRef = useRef(0)\r\n\r\n\tconst animate = useCallback((currentTS) => {\r\n\t\t\tif (checkDeath(snakeBody, foodBlock)) {\r\n\t\t\t\tif (window.confirm('You lose!, Restart game?')) {\r\n\t\t\t\t\twindow.location = '/'\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\trequestRef.current = window.requestAnimationFrame(animate)\r\n\r\n\t\t\tconst secondsSinceLastRender =\r\n\t\t\t\t(currentTS - previousTimeRef.current) / 1000\r\n\r\n\t\t\tif (secondsSinceLastRender < 1 / SNAKE_SPEED) return\r\n\r\n\t\t\tpreviousTimeRef.current = currentTS\r\n\r\n\t\t\tif (onSnake(snakeBody, foodBlock)) {\r\n\t\t\t\tsetFoodBlock(getRandomFoodCoords(snakeBody))\r\n\t\t\t}\r\n\r\n\t\t\tsetSnakeBody([\r\n\t\t\t\t...updateSnake(inputDirection.current, snakeBody, foodBlock),\r\n\t\t\t])\r\n\t\t}, [snakeBody, foodBlock])\r\n\r\n\tconst userInputDirection = e => {\r\n\t\tswitch (e.key) {\r\n\t\t\tcase 'ArrowUp':\r\n\t\t\t\tif (inputDirection.current.y !== 0) break\r\n\t\t\t\tinputDirection.current = { x: 0, y: -1 }\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowDown':\r\n\t\t\t\tif (inputDirection.current.y !== 0) break\r\n\t\t\t\tinputDirection.current = { x: 0, y: 1 }\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tif (inputDirection.current.x !== 0) break\r\n\t\t\t\tinputDirection.current = { x: -1, y: 0 }\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\tif (inputDirection.current.x !== 0) break\r\n\t\t\t\tinputDirection.current = { x: 1, y: 0 }\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\trequestRef.current = window.requestAnimationFrame(animate)\r\n\t\treturn () => window.cancelAnimationFrame(requestRef.current)\r\n\t}, [animate])\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener('keydown', userInputDirection)\r\n\t\treturn () => window.removeEventListener('keydown', userInputDirection)\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<div className='board'>\r\n\t\t\t{snakeBody.map((segment, idx) => (\r\n\t\t\t\t<Snake key={idx} coords={segment} />\r\n\t\t\t))}\r\n\t\t\t{foodBlock && <Food coords={foodBlock} />}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}